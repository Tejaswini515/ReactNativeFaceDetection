__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _RESULTS;

  var _reactNative = _require(_dependencyMap[0], "react-native");

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  var permissionTypes = {
    location: _reactNative.PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,
    camera: _reactNative.PermissionsAndroid.PERMISSIONS.CAMERA,
    microphone: _reactNative.PermissionsAndroid.PERMISSIONS.RECORD_AUDIO,
    contacts: _reactNative.PermissionsAndroid.PERMISSIONS.READ_CONTACTS,
    event: _reactNative.PermissionsAndroid.PERMISSIONS.READ_CALENDAR,
    storage: _reactNative.PermissionsAndroid.PERMISSIONS.WRITE_EXTERNAL_STORAGE,
    photo: _reactNative.PermissionsAndroid.PERMISSIONS.WRITE_EXTERNAL_STORAGE,
    callPhone: _reactNative.PermissionsAndroid.PERMISSIONS.CALL_PHONE,
    readSms: _reactNative.PermissionsAndroid.PERMISSIONS.READ_SMS,
    receiveSms: _reactNative.PermissionsAndroid.PERMISSIONS.RECEIVE_SMS
  };
  var RESULTS = (_RESULTS = {}, _defineProperty(_RESULTS, _reactNative.PermissionsAndroid.RESULTS.GRANTED, 'authorized'), _defineProperty(_RESULTS, _reactNative.PermissionsAndroid.RESULTS.DENIED, 'denied'), _defineProperty(_RESULTS, _reactNative.PermissionsAndroid.RESULTS.NEVER_ASK_AGAIN, 'restricted'), _RESULTS);
  var STORAGE_KEY = '@RNPermissions:didAskPermission:';

  var setDidAskOnce = function setDidAskOnce(permission) {
    return _reactNative.AsyncStorage.setItem(STORAGE_KEY + permission, 'true');
  };

  var getDidAskOnce = function getDidAskOnce(permission) {
    return _reactNative.AsyncStorage.getItem(STORAGE_KEY + permission).then(function (item) {
      return !!item;
    });
  };

  var ReactNativePermissions = function ReactNativePermissions() {
    var _this = this;

    _classCallCheck(this, ReactNativePermissions);

    this.canOpenSettings = function () {
      return Promise.resolve(false);
    };

    this.openSettings = function () {
      return Promise.reject(new Error("'openSettings' is deprecated on android"));
    };

    this.getTypes = function () {
      return Object.keys(permissionTypes);
    };

    this.check = function (permission, options) {
      if (!permissionTypes[permission]) {
        var error = new Error("ReactNativePermissions: " + permission + " is not a valid permission type on Android");
        return Promise.reject(error);
      }

      return _reactNative.PermissionsAndroid.check(permissionTypes[permission]).then(function (isAuthorized) {
        if (isAuthorized) {
          return 'authorized';
        }

        return getDidAskOnce(permission).then(function (didAsk) {
          if (didAsk) {
            return _reactNative.NativeModules.PermissionsAndroid.shouldShowRequestPermissionRationale(permissionTypes[permission]).then(function (shouldShow) {
              return shouldShow ? 'denied' : 'restricted';
            });
          }

          return 'undetermined';
        });
      });
    };

    this.request = function (permission, options) {
      if (!permissionTypes[permission]) {
        var error = new Error("ReactNativePermissions: " + permission + " is not a valid permission type on Android");
        return Promise.reject(error);
      }

      var rationale = void 0;

      if (options && options.rationale) {
        rationale = options.rationale;
      }

      return _reactNative.PermissionsAndroid.request(permissionTypes[permission], rationale).then(function (result) {
        if (typeof result === 'boolean') {
          return result ? 'authorized' : 'denied';
        }

        return setDidAskOnce(permission).then(function () {
          return RESULTS[result];
        });
      });
    };

    this.checkMultiple = function (permissions) {
      return Promise.all(permissions.map(function (permission) {
        return _this.check(permission);
      })).then(function (result) {
        return result.reduce(function (acc, value, index) {
          var name = permissions[index];
          acc[name] = value;
          return acc;
        }, {});
      });
    };
  };

  exports.default = new ReactNativePermissions();
});